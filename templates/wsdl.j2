from fastapi import APIRouter, Depends, HTTPException
import zeep
from zeep import helpers
import inspect
import json

from typing import Any, Dict, AnyStr, List, Union

from logging.config import dictConfig
import logging
from config import LogConfig

dictConfig(LogConfig().dict())
logger = logging.getLogger("wsdl-wrapper")

client = zeep.Client('{{wsdl_url}}')

JSONObject = Dict[AnyStr, Any]
JSONArray = List[Any]
JSONStructure = Union[JSONArray, JSONObject]

router = APIRouter(
    prefix="/soap",
    tags=["wsdl-wrapper"],
    responses={404: {"description": "Not found"}},
)

{% for operation in operations_definition %}
@router.{{operation.operation_type}}("/{{operation.operation_name.lower()}}{{operation.operation_qs_params}}")
def call_{{operation.operation_name.lower()}}({{operation.operation_fun_params}}):

    logger.info(f"Called: call_{{operation.operation_name.lower()}} > {%raw%}{locals()}{% endraw %}")

    wsdl_params = {}
    {% for param in operation.operation_params_lst %}
    if {{param}} is not None:
      wsdl_params["{{param}}"] = {{param}}
    {% endfor %}
    {% if operation.operation_type == 'post' %}
    res = client.service.{{operation.operation_name}}(wsdl_params)
    {% else %}
    res = client.service.{{operation.operation_name}}(**wsdl_params)
    {% endif%}

    input_dict = helpers.serialize_object(res)
    output_dict = json.loads(json.dumps(input_dict))

    return output_dict  
{% endfor %}